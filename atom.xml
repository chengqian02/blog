<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C·liberty.blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.c-x-l.club/"/>
  <updated>2020-08-04T07:26:38.160Z</updated>
  <id>http://blog.c-x-l.club/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python系列之面向对象编程</title>
    <link href="http://blog.c-x-l.club/2020/08/03/python_Object-oriented%20programming/"/>
    <id>http://blog.c-x-l.club/2020/08/03/python_Object-oriented%20programming/</id>
    <published>2020-08-02T16:00:00.000Z</published>
    <updated>2020-08-04T07:26:38.160Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。<br>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><a id="more"></a><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a><strong>简述</strong></h2><h3 id="面向对象三大特性："><a href="#面向对象三大特性：" class="headerlink" title="面向对象三大特性："></a>面向对象三大特性：</h3><ul><li><strong><a href="#基础语法(封装)">封装</a></strong> 根据职责 将属性 和 方法封装到一个抽象的类中</li><li><strong>[继承](# 继承)</strong> 实现代码的重用，相同的代码不需要重复的编写</li><li><strong>[多态](# 多态)</strong> 不同的对象调用相同的方法，产生不同的执行结果，增加代码的灵活度。</li></ul><h3 id="设计一个类，通常需要满足以下三个要素："><a href="#设计一个类，通常需要满足以下三个要素：" class="headerlink" title="设计一个类，通常需要满足以下三个要素："></a>设计一个类，通常需要满足以下三个要素：</h3><ol><li><strong>类名</strong>：这类事物的名字，满足[大驼峰命名法](# 大驼峰命名法)</li><li><strong>属性</strong>：这类事物具有什么样的特征</li><li><strong>方法</strong>：这类事物具有什么样的行为</li></ol><h3 id="大驼峰命名法："><a href="#大驼峰命名法：" class="headerlink" title="大驼峰命名法："></a>大驼峰命名法：</h3><ul><li>每一个单词的首字母大写</li><li>单词与单词之间没有下划线</li></ul><h2 id="基础语法-封装-："><a href="#基础语法-封装-：" class="headerlink" title="基础语法(封装)："></a><strong>基础语法</strong>(封装)：</h2><h3 id="dir内置函数"><a href="#dir内置函数" class="headerlink" title="dir内置函数"></a>dir内置函数</h3><p>使用以下两个方法验证：</p><p>1、在标识符/数据后输入一个. ,然后按下 TAB键，ipython 会提示该对象能够调用的 方法列表</p><p>2、使用内置函数 dir 传入 标识符/数据，可以查看对象内的 所有属性及方法</p><p>提示 “ <em>_方法名_\</em> “ 格式的方法是python提供的 内置方法/属性</p><h4 id="方法中的self参数"><a href="#方法中的self参数" class="headerlink" title="方法中的self参数"></a>方法中的self参数</h4><h5 id="给对象增加属性"><a href="#给对象增加属性" class="headerlink" title="给对象增加属性"></a>给对象增加属性</h5><p>在python中，要给对象设置属性，非常容易（不推荐使用）</p><p>因为：对象属性的封装应该封装在类的内部</p><p>方法：</p><ol><li>在类的外部代码中直接通过 . 设置一个属性即可</li></ol><blockquote><p>这种方式虽然简单，但是不推荐使用！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tom.name = <span class="string">"Tom"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在初始化方法内部定义属性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"Tom"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 吃鱼"</span> % self.name)</span><br><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></figure><ol start="3"><li><p>初始化的同时设置初始值</p></li><li><p>把希望设置的属性值，定义成 __init__ 方法的参数</p></li><li><p>在方法内部使用 self.属性 = 形参 接受外部传递的参数</p></li><li><p>在创建对象时，使用 类名(属性1, 属性2…) 调用</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 吃鱼"</span> % self.name)</span><br><span class="line">tom = Cat(<span class="string">"Tom"</span>)</span><br><span class="line">tom.eat()</span><br></pre></td></tr></table></figure><h4 id="del-方法"><a href="#del-方法" class="headerlink" title="__del__ 方法"></a>__del__ 方法</h4><ul><li>当使用 “类名()” 创建对象时，为对象分配完空间后，自动调用 __init__ 方法</li><li>当一个对象被从内存中销毁前，会自动调用 __del__方法</li></ul><h5 id="引用场景："><a href="#引用场景：" class="headerlink" title="引用场景："></a><strong>引用场景：</strong></h5><ul><li>如果希望在对象被销毁前，再做一些事情，可以考虑以下 __del__ 方法</li></ul><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><blockquote><p>tom 对象为一个全局变量，当程序结束时调用 __del__ 方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化一个变量"</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">tom = cat(<span class="string">"Tom"</span>)</span><br><span class="line">print(tom.name)</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br></pre></td></tr></table></figure><blockquote><p>del 可以删除一个对象，主动调用 __del__ 属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化一个变量"</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">tom = cat(<span class="string">"Tom"</span>)</span><br><span class="line">print(tom.name)</span><br><span class="line"><span class="keyword">del</span> tom</span><br><span class="line">print(<span class="string">'-'</span>*<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h4 id="str-方法"><a href="#str-方法" class="headerlink" title="__str__ 方法"></a>__str__ 方法</h4><ul><li>如果在开发过程中，希望使用 print 输出 对象变量 时，能够打印 自定义的内容，就可以利用 __str__ 这个内置方法</li></ul><blockquote><p> __str__ 方法必须返回一个字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"初始化一个变量"</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"结束"</span>)</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"自定义输出"</span></span><br><span class="line">    </span><br><span class="line">tom = cat(<span class="string">"Tom"</span>)</span><br><span class="line">print(tom)</span><br></pre></td></tr></table></figure><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><blockquote><p>身份运算符用于比较两个对象的内存地址是否一致（是否是对同一个对象的引用）</p></blockquote><ul><li>在python中针对 None 比较时，建议使用 is 判断</li></ul><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>is</td><td>is是判断两个标识符是不是引用同一个对象</td><td>x is y,类似于 id(x) == id(y)</td></tr><tr><td>is not</td><td>is not是判断两个标识符是不是引用不同对象</td><td>x is not y,类似 id(a) == id(b)</td></tr></tbody></table><p><strong>is 与 == 的区别</strong></p><ul><li>is用于判断两个变量引用对象是否为同一个</li><li>==用于判断 引用变量的值 是否相等</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line">a == b</span><br></pre></td></tr></table></figure><h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>对象的某些属性或方法 可能只希望在对象的内部被使用，而不希望在外部被访问到</li><li><strong>私有属性</strong>：就是对象不希望公开的属性</li><li><strong>私有方法</strong>：就是对象不希望公开的方法</li></ul><h4 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h4><ul><li>在定义属性或方法时，在属性名或者方法名前增加两个下划线，定义的就是私有属性或方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有属性定义</span></span><br><span class="line">self.__age = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 私有方法定义</span></span><br><span class="line">self.__secret(self):</span><br></pre></td></tr></table></figure><h4 id="伪私有属性和私有方法"><a href="#伪私有属性和私有方法" class="headerlink" title="伪私有属性和私有方法"></a>伪私有属性和私有方法</h4><blockquote><p>在日常开发中，不要使用这种方式，访问对象的私有属性或私有方法</p></blockquote><p><kbd>python</kbd>中，并没有真正意义的私有</p><ul><li>在给属性、方法命名时，实际是对名称做了一些特殊处理，是的外界无法访问到</li><li>处理方式：在 <strong>名称</strong> 前面加上 _类名 =&gt; _类名__名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 私有属性，外部不能直接访问</span></span><br><span class="line">print(xiaofang._Women__age)</span><br><span class="line"><span class="comment"># 私有方法，外部不能直接调用</span></span><br><span class="line">xiaofang._Women__secret()</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h2><blockquote><p> <strong>概念</strong>：子类拥有父类的所有方法和属性</p></blockquote><h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a><strong>基础语法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">(父类名)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><strong>子类</strong> 继承自 父类，可以直接 享受 父类中已经封装好的方法，不需要再次开发</li><li>子类 中应该根据 职责，封装 子类特有的 属性和方法</li></ul><h5 id="继承的传递性"><a href="#继承的传递性" class="headerlink" title="继承的传递性"></a>继承的传递性</h5><ul><li><kbd>C</kbd>类是<kbd>B</kbd>类继承，<kbd>B</kbd>类又从<kbd>A</kbd>类继承</li><li>那么<kbd>C</kbd>类就具有<kbd>B</kbd>类和<kbd>A</kbd>类的所有属性和方法</li></ul><h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><ul><li>子类拥有父类的所有方法和属性</li><li>子类 继承自 父类，可以直接享受 父类中已经封装好的方法，不需要再次开发</li></ul><ol><li><p><a href="#覆盖父类的方法">覆盖 父类的方法</a></p></li><li><p>[对父类方法进行扩展](# 对父类方法进行扩展)</p></li></ol><h5 id="覆盖父类的方法"><a href="#覆盖父类的方法" class="headerlink" title="覆盖父类的方法"></a>覆盖父类的方法</h5><blockquote><p>具体实现方式，就相当于在子类中定义了一个和父类同名的方法并且实现</p></blockquote><p>重写之后，只会调用 子类中重写的方法，而不再会调用父类封装的方法</p><h5 id="对父类方法进行扩展"><a href="#对父类方法进行扩展" class="headerlink" title="对父类方法进行扩展"></a>对父类方法进行扩展</h5><ol><li>在子类中重写 父类的方法</li><li>在需要的位置使用<kbd>[super()](# 关于super).父类方法</kbd>类调用父类方法的执行</li><li>代码其他的位置针对子类的需求，编写 子类特有的代码实现</li></ol><h4 id="关于super"><a href="#关于super" class="headerlink" title="关于super"></a>关于super</h4><ul><li>在<kbd>Python</kbd> 中 <kbd>super</kbd> 是一个特殊的类</li><li><kbd>super()</kbd> 就是使用 <kbd>super</kbd> 类创建出来的对象</li><li>最常 使用的场景就是在 重写父类方法时，调用 在父类中封装的方法实现</li></ul><h3 id="父类的-私有属性和方法"><a href="#父类的-私有属性和方法" class="headerlink" title="父类的 私有属性和方法"></a>父类的 私有属性和方法</h3><ol><li>子类对象 不能再自己的方法内部，直接访问父类的私有属性或私有方法</li><li>子类对象 可以通过父类的公有方法间接访问到私有属性或私有方法</li></ol><ul><li>私有属性、方法 是对象的隐私，不对外公开，外界以及子类都不能直接访问</li><li>私有属性、方法通常做一些内部的事情</li></ul><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><ul><li>子类可以拥有多个父类，并且具有 所有父类的 属性 和 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类名<span class="params">(父类名<span class="number">1</span>, 父类名<span class="number">2.</span>..)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>如果不同的父类中存在同名的方法，<strong>子类对象</strong> 在调用方法时，会调用 <strong>哪一个父类中</strong> 的方法？</li></ul><blockquote><p>提示：开发时，应该尽量避免这种容易产生混淆的情况！ –如果父类之间存在同名的<strong>属性或着方法</strong>，应该 <strong>尽量避免</strong> 使用多继承</p></blockquote><h4 id="python中的MRO–方法搜索顺序"><a href="#python中的MRO–方法搜索顺序" class="headerlink" title="python中的MRO–方法搜索顺序"></a>python中的MRO–方法搜索顺序</h4><ul><li><kbd>python</kbd> 中针对类提供了一个内置属性 <kbd><strong>__mro__</strong></kbd> 可以查看 方法 搜索顺序</li><li>MRO是 <kbd>method resolution order</kbd>， 主要用于 在多继承时判断方法、属性的调用 路径</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(C.__mro__)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A --- test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"A --- demo"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B --- test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"B --- demo"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">c = C()</span><br><span class="line">print(C.__mro__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)</span><br></pre></td></tr></table></figure><p>新式类与旧式类</p><blockquote><p><kbd>object</kbd> 是 <kbd>python</kbd> 为所有对象提供的 <strong>基类</strong>，提供有一些内置的属性和方法，可以使用 <kbd>dir</kbd> 函数查看</p></blockquote><ul><li><p>新式类：以 <kbd>object</kbd> 为基类的类，推荐使用</p></li><li><p>经典类：不以 <kbd>object</kbd> 为基类的类，不推荐使用</p></li><li><p>在python 3.x  中定义类时，如果没有指定父类，会默认使用 object 作为该类的基类 <kbd>--python3.x</kbd> 中定义的类都是新式类</p></li><li><p>在 python2.x中定义类时，如果没有指定父类，则不会以 object 作为基类</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名<span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h2><ul><li><strong>多态</strong> 可以增加代码的灵活度</li><li>以 <strong>继承</strong> 和 <strong>重写父类方法</strong> 为前提</li><li>是调用方法的技巧，不会影响到类的内部设计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s dog play"</span>%self.name)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoTianQuan</span><span class="params">(Dog)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s dog fly play"</span>%self.name)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_with_dog</span><span class="params">(self,dog)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'%s with %s play'</span>%(self.name,dog.name))</span><br><span class="line">        dog.game()</span><br><span class="line"><span class="comment"># wangcai = Dog("旺财")</span></span><br><span class="line">wangcai = XiaoTianQuan(<span class="string">"旺财"</span>)</span><br><span class="line">xiaoming = Person(<span class="string">"小明"</span>)</span><br><span class="line">xiaoming.game_with_dog(wangcai)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##### 类是一个特殊的对象</span></span><br><span class="line"></span><br><span class="line">&lt;kbd&gt;python&lt;/kbd&gt; 中一切皆对象：</span><br><span class="line"></span><br><span class="line">- &lt;kbd&gt;<span class="class"><span class="keyword">class</span> <span class="title">AAA</span>&lt;/<span class="title">kbd</span>&gt; ：定义的类属于 **类对象**</span></span><br><span class="line">- &lt;kbd&gt;obj1 = AAA()&lt;/kbd&gt;：属于 **实例对象**</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 类属性和实例属性</span></span><br><span class="line"></span><br><span class="line">- **类属性** 就是给 **类对象** 中定义的 **属性**</span><br><span class="line">- 通常用来记录 **与这个类相关** 的特征</span><br><span class="line">- **类属性** 不会用于记录 **具体对象** 的特征</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line"></span><br><span class="line">​```python</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span><span class="params">(object)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line">tool1 = Tool(<span class="string">"斧头"</span>)</span><br><span class="line">tool2 = Tool(<span class="string">"榔头"</span>)</span><br><span class="line">tool3 = Tool(<span class="string">"铁锹"</span>)</span><br><span class="line">print(Tool.count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><ul><li>在 <strong>类方法</strong> 内部可以直接访问 类属性 或者调用其他的 <strong>类方法</strong></li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 类方法名<span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>类方法需要用 <strong>修饰器</strong> <kbd>@classmethod</kbd> 来表示，高数解释器这是一个类方法</li><li>类方法的 <strong>第一个参数</strong> 应该是 <kbd>cls</kbd><ul><li>由 <strong>哪一个类</strong> 调用的方法，方法内的 <kbd>cls</kbd> 就是 <strong>哪一个类的引用</strong></li><li>这个参数和 <strong>实例方法</strong> 的第一个参数是 <kbd>self</kbd> 类似</li><li><strong>提示</strong> 使用其他名称也可以，不过习惯使用 <kbd>cls</kbd></li><li>通过 类名. 调用 类方法，调用方法时，不需要传递 <kbd>cls</kbd> 参数</li></ul></li></ul><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul><li>即 <strong>不需要</strong> 访问 <strong>实例属性</strong> 或者调用 <strong>实例方法</strong></li><li>也 <strong>不需要</strong> 访问 <strong>类属性</strong> 或者调用 <strong>类方法</strong></li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 静态方法名<span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>能够不需要定义对象，直接使用<kbd>类名. </kbd> 调用 <strong>静态方法</strong></p></blockquote><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gname</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 历史最高分</span></span><br><span class="line">    top_score = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, player_name)</span>:</span></span><br><span class="line">        self.player_name = player_name</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_help</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"help information:let..."</span>)</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_top_score</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"历史记录：%d"</span>%cls.top_score)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_game</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"%s 开始游戏啦。。。"</span>%self.player_name)</span><br><span class="line"><span class="comment"># 1.查看游戏的帮助信息</span></span><br><span class="line">Gname.show_help()</span><br><span class="line"><span class="comment"># 2.查看历史最高分</span></span><br><span class="line">Gname.show_top_score()</span><br><span class="line"><span class="comment"># 3.创建游戏对象</span></span><br><span class="line">cheng = Gname(<span class="string">"cheng"</span>)</span><br><span class="line">Gname.start_game(cheng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">help information:let...</span><br><span class="line">历史记录：<span class="number">0</span></span><br><span class="line">cheng 开始游戏啦。。。</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p><strong>实例方法</strong>：方法内部需要访问 <strong>实例属性</strong></p><p><strong>实例方法</strong> 内部可以使用类名.访问类属性</p></li><li><p><strong>类方法</strong>：方法内部只需要访问 <strong>类属性</strong></p></li><li><p><strong>静态方法</strong>：方法内部，不需要 <strong>实例属性</strong> 和 <strong>类属性</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。&lt;br&gt;在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://blog.c-x-l.club/tags/python/"/>
    
      <category term="面向对象" scheme="http://blog.c-x-l.club/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>使用HTTP/HTTPS构建Git Server</title>
    <link href="http://blog.c-x-l.club/2020/01/08/Git_HTTP/"/>
    <id>http://blog.c-x-l.club/2020/01/08/Git_HTTP/</id>
    <published>2020-01-07T16:00:00.000Z</published>
    <updated>2020-01-12T05:33:37.573Z</updated>
    
    <content type="html"><![CDATA[<p>架构HTTP以及HTTPS访问的Git Server，拥有账号和密码保护机制，同时HTTPS在传输时会先加密，可以很好的保护我们数据的安全。</p><a id="more"></a><p style: size:50px;><b>使用HTTP构建Git Server</b></p><p>我这个实验在虚拟机中尝试，使用的是centos7.</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、启动centos虚拟机，并自己配置好相关的yum源设置</p><P>2、安装相关软件<p></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld        // 关闭防火墙</span><br><span class="line">setenforce 0</span><br><span class="line">yum install -y openssl httpd git mod_ssl</span><br></pre></td></tr></table></figure><h2 id="搭建基于-http-的-Git-Server"><a href="#搭建基于-http-的-Git-Server" class="headerlink" title="搭建基于 http 的 Git Server"></a>搭建基于 http 的 Git Server</h2><h3 id="1、创建Git仓库"><a href="#1、创建Git仓库" class="headerlink" title="1、创建Git仓库"></a>1、创建Git仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/http_git/test.git</span><br><span class="line"><span class="built_in">cd</span> /opt/http_git/test.git</span><br><span class="line">git init --bare</span><br><span class="line">chown -R apache:apache /opt/http_git        //设置权限</span><br></pre></td></tr></table></figure><P style:typecolor:red;>该目录尽量使用这个opt目录，避免出错。<p></p><h3 id="2、创建账号"><a href="#2、创建账号" class="headerlink" title="2、创建账号"></a>2、创建账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// testuser为账户名 可以随意定义</span><br><span class="line">htpasswd -m -c /etc/httpd/conf.d/git-team.htpasswd testuser</span><br><span class="line"></span><br><span class="line">// 修改git-team.htpasswd文件的所有者与所属群组</span><br><span class="line">chown apache:apache /etc/httpd/conf.d/git-team.htpasswd</span><br><span class="line"></span><br><span class="line">// 设置git-team.htpasswd文件的访问权限</span><br><span class="line">chmod 640 /etc/httpd/conf.d/git-team.htpasswd</span><br></pre></td></tr></table></figure><h3 id="3、设置-http-配置文件"><a href="#3、设置-http-配置文件" class="headerlink" title="3、设置 http 配置文件"></a>3、设置 http 配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/vhgit.conf</span><br><span class="line"> </span><br><span class="line">&lt;VirtualHost 192.168.174.130:8080&gt;</span><br><span class="line">        SetEnv GIT_HTTP_EXPORT_ALL</span><br><span class="line">        SetEnv GIT_PROJECT_ROOT /opt/http_git</span><br><span class="line">        ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/</span><br><span class="line">        &lt;Location /&gt;</span><br><span class="line">                AuthType Basic</span><br><span class="line">                AuthName <span class="string">"Git"</span></span><br><span class="line">                AuthUserFile /etc/httpd/conf.d/git-team.htpasswd</span><br><span class="line">                Require valid-user</span><br><span class="line">        &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">Listen 192.168.174.130:8080</span><br><span class="line"><span class="comment"># ServerName是git服务器的域名,这里最后填写你机子的IP</span></span><br><span class="line"><span class="comment"># /opt/http_git是代码库存放的文件夹</span></span><br><span class="line"><span class="comment"># ScriptAlias是将以/git/开头的访问路径映射至git的CGI程序git-http-backend</span></span><br><span class="line"><span class="comment"># AuthUserFile是验证用户帐户的文件</span></span><br><span class="line"><span class="comment"># 在主机浏览器中输入虚拟机ip查看httpd是否正常启动（记得关闭linux的防火墙或者做相关设置放通）。</span></span><br></pre></td></tr></table></figure><h3 id="4、重启-httpd-服务"><a href="#4、重启-httpd-服务" class="headerlink" title="4、重启 httpd 服务"></a>4、重启 httpd 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><p>在主机上进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://192.168.174.130:8080/git/test.git</span><br></pre></td></tr></table></figure><h2 id="搭建基于-https-的-GitServer"><a href="#搭建基于-https-的-GitServer" class="headerlink" title="搭建基于 https 的 GitServer"></a>搭建基于 https 的 GitServer</h2><p>以下配置基于上边的配置</p><h3 id="1、配置自签证书："><a href="#1、配置自签证书：" class="headerlink" title="1、配置自签证书："></a>1、配置自签证书：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pki/CA</span><br><span class="line">touch index.txt</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; serial</span><br><span class="line">(<span class="built_in">umask</span> 077; openssl genrsa -out private/cakey.pem 4096)</span><br><span class="line">openssl req -new -x509 -key private/cakey.pem -out cacert.pem -days 3650</span><br></pre></td></tr></table></figure><h3 id="2、配置httpd用到的证书"><a href="#2、配置httpd用到的证书" class="headerlink" title="2、配置httpd用到的证书"></a>2、配置httpd用到的证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/httpd/ssl -p</span><br><span class="line"><span class="built_in">cd</span> /etc/httpd/ssl</span><br><span class="line">(<span class="built_in">umask</span> 077;openssl  genrsa -out httpd.key 2048)</span><br><span class="line">openssl req -new -key httpd.key -out httpd.csr -days 365</span><br><span class="line">openssl ca -<span class="keyword">in</span> httpd.csr -out httpd.crt</span><br></pre></td></tr></table></figure><h3 id="3、配置-httpd-配置文件。"><a href="#3、配置-httpd-配置文件。" class="headerlink" title="3、配置 httpd 配置文件。"></a>3、配置 httpd 配置文件。</h3> <p>(1).删除 ssl.conf 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/httpd/conf.d/</span><br><span class="line">rm -rf ssl.conf</span><br></pre></td></tr></table></figure>  <p>(2).修改以下配置h</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> vim /etc/httpd/conf.d/vhgit.conf</span><br><span class="line"> ---</span><br><span class="line"> &lt;VirtualHost 192.168.174.130:443&gt;</span><br><span class="line">    SetEnv GIT_HTTP_EXPORT_ALL</span><br><span class="line">    SetEnv GIT_PROJECT_ROOT /opt/http_git</span><br><span class="line">    ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/</span><br><span class="line">    SSLEngine on</span><br><span class="line">    SSLCertificateKeyFile /etc/httpd/ssl/httpd.key</span><br><span class="line">    SSLCertificateFile /etc/httpd/ssl/httpd.crt</span><br><span class="line">    &lt;Location /&gt;</span><br><span class="line">            AuthType Basic</span><br><span class="line">            AuthName <span class="string">"Git"</span></span><br><span class="line">            AuthUserFile /etc/httpd/conf.d/git.htpasswd</span><br><span class="line">            Require valid-user</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">Listen 192.168.174.130:443</span><br></pre></td></tr></table></figure><h3 id="4、重新启动-httpd-服务"><a href="#4、重新启动-httpd-服务" class="headerlink" title="4、重新启动 httpd 服务"></a>4、重新启动 httpd 服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><h3 id="5、测试："><a href="#5、测试：" class="headerlink" title="5、测试："></a>5、测试：</h3><p>在主机上进行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span>        // 忽略证书</span><br><span class="line">git <span class="built_in">clone</span> https://192.168.174.130/git/test.git</span><br></pre></td></tr></table></figure></P></P>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;架构HTTP以及HTTPS访问的Git Server，拥有账号和密码保护机制，同时HTTPS在传输时会先加密，可以很好的保护我们数据的安全。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://blog.c-x-l.club/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>VS Code搭建c语言环境</title>
    <link href="http://blog.c-x-l.club/2019/12/21/VSCode_clanguage/"/>
    <id>http://blog.c-x-l.club/2019/12/21/VSCode_clanguage/</id>
    <published>2019-12-21T09:01:24.249Z</published>
    <updated>2019-12-26T12:46:46.604Z</updated>
    
    <content type="html"><![CDATA[<p><strong>VS Code搭建c语言环境总体流程：</strong></p><ol><li>下载安装vscode（自行安装）</li><li>安装编译、调试环境</li><li>修改vscode调试配置文件</li></ol><a id="more"></a><hr><h2 id="获取c-c-扩展"><a href="#获取c-c-扩展" class="headerlink" title="获取c/c++扩展"></a>获取c/c++扩展</h2><ul><li>打开VS Code</li><li>ctrl+shift+x打开商店</li><li>搜索C/C++</li><li>安装、重启VS Code</li></ul><h2 id="安装编译环境mingw-w64"><a href="#安装编译环境mingw-w64" class="headerlink" title="安装编译环境mingw-w64"></a>安装编译环境mingw-w64</h2><ul><li><a href="https://sourceforge.net/projects/mingw-w64/files/" target="_blank" rel="noopener">下载MinGW</a><blockquote><p>因为windows下vscode不直接具备对于C语言的编译调试工具，所以要下载集成gcc等工具的MinGw以提供扩展支持。</p></blockquote></li></ul><p><img src="/2019/12/21/VSCode_clanguage/mingw.png" alt="图片加载失败"></p><ul><li>配置系统环境变量</li></ul><p>打开我的电脑-属性-高级系统设置-高级-环境变量</p><p>在系统变量中找到Path变量，选择编辑(没有则新建)，将之前mingw解压后目录下bin文件夹目录添加至其中，注意windows 7及以前版本需与原值用英文分号隔开，windows8及以上版本选择新建即可。</p><p><img src="/2019/12/21/VSCode_clanguage/bin.png" alt="图片加载失败"></p><p>然后在系统变量中找到include变量(没有则新建一个，不区分大小写)，编辑，将原mingw解压目录下include文件夹目录添加进去。</p><p><img src="/2019/12/21/VSCode_clanguage/include.png" alt="图片加载失败"></p><ul><li>cmd测试</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure><p><img src="/2019/12/21/VSCode_clanguage/gcc.png" alt="图片加载失败"></p><h2 id="配置VS-Code"><a href="#配置VS-Code" class="headerlink" title="配置VS Code"></a>配置VS Code</h2><h3 id="配置智能提示"><a href="#配置智能提示" class="headerlink" title="配置智能提示"></a>配置智能提示</h3><ul><li>编写一个测试文件demo.c,点击引入的标准库下的“提示灯”,生成c_cpp_properties.json文件</li><li>编辑c_cpp_properties.json</li></ul><p>c_cpp_properties.json修改内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Win32&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;&#x2F;**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [</span><br><span class="line">                &quot;_DEBUG&quot;,</span><br><span class="line">                &quot;UNICODE&quot;,</span><br><span class="line">                &quot;_UNICODE&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;windowsSdkVersion&quot;: &quot;8.1&quot;,</span><br><span class="line">            &quot;compilerPath&quot;: &quot;D:\\MinGW\\bin\\gcc.exe&quot;,&#x2F;&#x2F; 自己电脑上的gcc路径</span><br><span class="line">            &quot;cStandard&quot;: &quot;c11&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;c++17&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;msvc-x64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启调试功能"><a href="#开启调试功能" class="headerlink" title="开启调试功能"></a>开启调试功能</h3><ul><li>F5或Ctrl+F5启用调试，选择C++(GDB/LLDB)生成launch.json文件，修改如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    &#x2F;&#x2F; 悬停以查看现有属性的描述。</span><br><span class="line">    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;$&#123;fileBasenameNoExtension&#125;.exe&quot;,&#x2F;&#x2F; 被调试程序</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;miDebuggerPath&quot;: &quot;D:\\MinGW\\bin\\gdb.exe&quot;,&#x2F;&#x2F; 自己电脑的gdb</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;echo&quot;,&#x2F;&#x2F; 在调试前需要执行的任务名称</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Ctrl+Shift+P输入Tasks:Configure Task配置任务，选择使用模块创建task.json文件，选择Others模板，生成task.json文件，修改如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; See https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">    &#x2F;&#x2F; for the documentation about the tasks.json format</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;echo&quot;,&#x2F;&#x2F; 任务名称</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;gcc&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-g&quot;, &quot;$&#123;file&#125;&quot;, &quot;-o&quot;, &quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;&#x2F;&#x2F; 生成可调试的执行文件</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果出现错误：进程终止，退出代码：1，可能是gcc还没被编辑器加载（测试方法：打开控制台，输入gcc，看提示信息），重启编辑器就可以。</p></blockquote><blockquote><p>配置中需要切换目录的地方一定要切换。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;VS Code搭建c语言环境总体流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载安装vscode（自行安装）&lt;/li&gt;
&lt;li&gt;安装编译、调试环境&lt;/li&gt;
&lt;li&gt;修改vscode调试配置文件&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="c语言" scheme="http://blog.c-x-l.club/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Centos7.2下搭建FTP服务器</title>
    <link href="http://blog.c-x-l.club/2019/03/01/Linux.FTP%20server/"/>
    <id>http://blog.c-x-l.club/2019/03/01/Linux.FTP%20server/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-12-21T09:18:54.759Z</updated>
    
    <content type="html"><![CDATA[<p>FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。 FTP是File Transfer Protocol(文件传输协议)。顾名思义，就是专门用来传输文件的协议。简单地说，支持FTP协议的服务器就是FTP服务器。</p><a id="more"></a><p style: size:50px;><b>Centos7.2下搭建FTP服务器</b></p><p>在搭建服务器之前检查yum源，或者连通网络设置一些正规的源</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="安装ftp-使用yum"><a href="#安装ftp-使用yum" class="headerlink" title="安装ftp-使用yum"></a>安装ftp-使用yum</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure><h3 id="启动ftp服务-默认为21端口"><a href="#启动ftp服务-默认为21端口" class="headerlink" title="启动ftp服务-默认为21端口"></a>启动ftp服务-默认为21端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd</span><br></pre></td></tr></table></figure><h3 id="查看端口是否占用"><a href="#查看端口是否占用" class="headerlink" title="查看端口是否占用"></a>查看端口是否占用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltp | grep 21</span><br></pre></td></tr></table></figure><h2 id="匿名访问"><a href="#匿名访问" class="headerlink" title="匿名访问"></a>匿名访问</h2><p>以上内容没问题后，访问ftp://xxx.xxx.xxx.xxx即可</p><h2 id="本地用户登录"><a href="#本地用户登录" class="headerlink" title="本地用户登录"></a>本地用户登录</h2><h3 id="配置FTP-权限"><a href="#配置FTP-权限" class="headerlink" title="配置FTP 权限"></a>配置FTP 权限</h3><p>&emsp;了解 VSFTP 配置,vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件：<br>&emsp;&emsp;vsftpd.conf 为主要配置文件<br>&emsp;&emsp;ftpusers 配置禁止访问 FTP 服务器的用户列表<br>&emsp;&emsp;user_list 配置用户访问控制</p><h3 id="阻止匿名访问和切换根目录"><a href="#阻止匿名访问和切换根目录" class="headerlink" title="阻止匿名访问和切换根目录"></a>阻止匿名访问和切换根目录</h3><p>&emsp;编辑 /etc/vsftpd/vsftpd.conf，找到下面两处配置并修改：<br>&emsp;# 禁用匿名用户<br>&emsp;anonymous_enable=NO<br>&emsp;# 禁止切换根目录<br>&emsp;chroot_local_user=YES</p><h3 id="重启FTP服务"><a href="#重启FTP服务" class="headerlink" title="重启FTP服务"></a>重启FTP服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart vsftp</span><br></pre></td></tr></table></figure><h3 id="创建-FTP-用户"><a href="#创建-FTP-用户" class="headerlink" title="创建 FTP 用户"></a>创建 FTP 用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 创建用户ftpuser</span><br><span class="line">useradd ftpuser</span><br><span class="line">// 为用户设置密码</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ftppassword"</span> | passwd ftpuser --stdin</span><br></pre></td></tr></table></figure><h3 id="限制该用户仅能通过-FTP-访问"><a href="#限制该用户仅能通过-FTP-访问" class="headerlink" title="限制该用户仅能通过 FTP 访问"></a>限制该用户仅能通过 FTP 访问</h3><p>&emsp; 限制用户 ftpuser 只能通过 FTP 访问服务器，而不能直接登录服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /sbin/nologin ftpuser</span><br></pre></td></tr></table></figure><h3 id="为用户分配主目录"><a href="#为用户分配主目录" class="headerlink" title="为用户分配主目录"></a>为用户分配主目录</h3><p>&emsp; 为用户 ftpuser 创建主目录并约定：<br>&emsp;&emsp; /data/ftp 为主目录, 该目录不可上传文件<br>&emsp;&emsp; /data/ftp/pub 文件只能上传到该目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/ftp/pub</span><br><span class="line">// 创建登录欢迎文件</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Welcome to use FTP service."</span> &gt; /data/ftp/welcome.txt</span><br><span class="line">// 设置访问权限</span><br><span class="line">chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub</span><br></pre></td></tr></table></figure><p>&emsp;&emsp; 设置为用户的主目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -d /data/ftp ftpuser</span><br></pre></td></tr></table></figure><h2 id="虚拟用户登录"><a href="#虚拟用户登录" class="headerlink" title="虚拟用户登录"></a>虚拟用户登录</h2><h3 id="添加虚拟用户口令文件"><a href="#添加虚拟用户口令文件" class="headerlink" title="添加虚拟用户口令文件"></a>添加虚拟用户口令文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vftpuser.txt</span><br></pre></td></tr></table></figure><p>添加虚拟用户名和密码，一行用户名，一行密码，以此类推。奇数行为用户名，偶数行为密码。<br>&emsp;bobyuan     // 用户名<br>&emsp;123456      // 密码<br>&emsp;markwang    //用户名<br>&emsp;123456      //密码</p><h3 id="生成虚拟用户口令认证文件"><a href="#生成虚拟用户口令认证文件" class="headerlink" title="生成虚拟用户口令认证文件"></a>生成虚拟用户口令认证文件</h3><p>&emsp;将刚添加的vftpuser.txt虚拟用户口令文件转换成系统识别的口令认证文件。首先查看系统有没有安装生成口令认证文件所需的软件db4-utils。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep db4-utils</span><br></pre></td></tr></table></figure><p>如果没有则需要单独安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh db4-utils-4.3.29-9.fc6.i386.rpm</span><br></pre></td></tr></table></figure><p>下面使用db_load命令生成虚拟用户口令认证文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/vftpuser.txt/etc/vsftpd/vftpuser.db</span><br></pre></td></tr></table></figure></p><h3 id="编辑vsftpd的PAM认证文件"><a href="#编辑vsftpd的PAM认证文件" class="headerlink" title="编辑vsftpd的PAM认证文件"></a>编辑vsftpd的PAM认证文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/pam.d/vsftpd</span><br></pre></td></tr></table></figure><p>将里面其他的都注释掉，添加下面这两行：<br>&emsp;&emsp;auth required /lib/security/pam_userdb.so db=/etc/vsftpd/vftpuser<br>&emsp;&emsp;account required /lib/security/pam_userdb.so db=/etc/vsftpd/vftpuser</p><p>注:64位系统需使用下面的两行<br>&emsp;&emsp;auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vftpuser<br>&emsp;&emsp;account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vftpuser</p><h3 id="配置vsftpd-conf（设置虚拟用户配置项）"><a href="#配置vsftpd-conf（设置虚拟用户配置项）" class="headerlink" title="配置vsftpd.conf（设置虚拟用户配置项）"></a>配置vsftpd.conf（设置虚拟用户配置项）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;anonymous_enable=NO #关闭匿名用户【该项已存在,需修改】<br>&emsp;&emsp;guest_enable=YES #开启虚拟用户<br>&emsp;&emsp;guest_username=vftpuser #FTP虚拟用户对应的系统用户<br>&emsp;&emsp;pam_service_name=vsftpd #PAM认证文件<br>&emsp;&emsp;user_config_dir=/etc/vsftpd/vsftpd_config_dir #用户配置文件的目录</p><h3 id="编辑用户配置文件"><a href="#编辑用户配置文件" class="headerlink" title="编辑用户配置文件"></a>编辑用户配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd_config_dir/user1</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;local_root=/data/ftproot/user1 #【该用户的主目录】<br>&emsp;&emsp;anon_world_readable_only=NO #【下载权限】<br>&emsp;&emsp;anon_upload_enable=YES #【上传权限】<br>&emsp;&emsp;anon_mkdir_write_enable=YES #【创建目录的权限】<br>&emsp;&emsp;anon_other_write_enable=NO #【删除和重命名的权限】</p><h3 id="7、启动vsftpd"><a href="#7、启动vsftpd" class="headerlink" title="7、启动vsftpd"></a>7、启动vsftpd</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/vsftpd start</span><br></pre></td></tr></table></figure><h3 id="8、检查"><a href="#8、检查" class="headerlink" title="8、检查"></a>8、检查</h3><p>ftp 127.0.0.1<br>输入用户名密码登录,然后使用put命令上传文件<br>put a.txt<br>dir检查文件上传成功即可.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FTP服务器（File Transfer Protocol Server）是在互联网上提供文件存储和访问服务的计算机，它们依照FTP协议提供服务。 FTP是File Transfer Protocol(文件传输协议)。顾名思义，就是专门用来传输文件的协议。简单地说，支持FTP协议的服务器就是FTP服务器。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="http://blog.c-x-l.club/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://blog.c-x-l.club/tags/Linux/"/>
    
      <category term="Centos" scheme="http://blog.c-x-l.club/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github_page搭建博客</title>
    <link href="http://blog.c-x-l.club/2018/10/13/hexo-github/"/>
    <id>http://blog.c-x-l.club/2018/10/13/hexo-github/</id>
    <published>2018-10-12T16:00:00.000Z</published>
    <updated>2019-12-26T12:25:26.512Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架，可托管于github pages，可免去维护服务器的麻烦，博主们可更专注于内容的创作。</p><a id="more"></a><p style: size:50px;><b>使用Hexo+github搭建属于自己的博客</b></p><p>搭建步骤：</p><h2 id="根据”Hexo官网“步骤安装git-node-js"><a href="#根据”Hexo官网“步骤安装git-node-js" class="headerlink" title="根据”Hexo官网“步骤安装git,node.js"></a>根据”<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网</a>“步骤安装git,node.js</h2><p color: red;>注意：在安装"node.js"软件时勾选Add to PATH选项</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>执行下列命令安装hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，选择一个博客的主目录，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成之后该目录的目录结构如下:<br>&emsp;&emsp;_config.yml     # 网站的 配置 信息<br>&emsp;&emsp;package.json          # 应用程序的信息<br>&emsp;&emsp;scaffolds             # 模板文件夹<br>&emsp;&emsp;source                # 博文源文件目录<br>&emsp;&emsp;_drafts               # 草稿文件夹<br>&emsp;&emsp;_posts                # 博文文件夹<br>&emsp;&emsp;themes                # 主题文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>&emsp;再执行以上命令，访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可快速体验Hexo</p><p><img src="/2018/10/13/hexo-github/hexo.jpg" alt="图片加载失败"></p><h2 id="根据-Hexo文档-对网站做一些简单的配置，然后修改主题为next。更多主题可到”hexo主题网站查看“。"><a href="#根据-Hexo文档-对网站做一些简单的配置，然后修改主题为next。更多主题可到”hexo主题网站查看“。" class="headerlink" title="根据 Hexo文档 对网站做一些简单的配置，然后修改主题为next。更多主题可到”hexo主题网站查看“。"></a>根据 Hexo文档 对网站做一些简单的配置，然后修改主题为next。更多主题可到”<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo主题网站查看</a>“。</h2><p>&emsp;安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your-hexo-site</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>&emsp;修改hexo根目录的_config.yml中的theme参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后执行 hexo clean &amp; hexo g &amp; hexo s 命令即可看到效果</p><p>&emsp;&emsp;更多的主题配置可见 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next官网</a></p><h2 id="配置-github-pages"><a href="#配置-github-pages" class="headerlink" title="配置 github pages"></a>配置 github pages</h2><p>&emsp;&emsp;在配置github pages页面之前需要到<a href="www.github.com">GitHub官网</a>注册一个属于自己的账号。</p><p>&emsp;&emsp;然后到github上创建一个新的空仓库，名字格式为 账户名.github.io，譬如我的github账户名是 c-liberty，所以我的github pages 仓库的名字应为 c-liberty.github.io</p><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后配置 Hexo根目录的 _config.yml，xxx为你的用户名，注意还需要加入你的 github 用户名和密码，不然后面推送失败（但是上传代码时注意防止密码泄露）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果你是第一次配置 github 远程仓库，你还须将你电脑的ssh key 配置到 github 上，具体可参考 git远程仓库</p><h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><p>&emsp;&emsp;上传文件需要配置ssh key，不然无法上传。<br>&emsp;&emsp;首先先检查一下本地是否已经存在ssh key,在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件： </p><p><img src="/2018/10/13/hexo-github/sshcreate.jpg" alt="图片加载失败"></p><p>&emsp;&emsp;设置name和emai</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"&lt;your name&gt;"</span></span><br><span class="line">git config --global user.email <span class="string">"&lt;your email&gt;"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是这里的name是随意的，邮箱是你的联系邮箱，与github上的邮箱没有什么联系（不过我都是同一个邮箱）。</p><p><b>生成ssh 密钥</b></p><p>&emsp;&emsp;输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"XXXXX@qq.com"</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一路按回车键即可，如果设置了密码请记住。<br>&emsp;&emsp;这一步在~/.ssh/下生成了两个文件id_rsa 和 id_rsa.pub</p><p><b>获取Key</b></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后拷贝key</p><p>&emsp;&emsp;在Github上添加SSH密钥</p><p>&emsp;&emsp;在<b><a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a>下 add new ssh key</b></p><p><img src="/2018/10/13/hexo-github/ssh.jpg" alt="图片加载失败"></p><p>&emsp;&emsp;然后title随便取个名字，key 就是上面我们拷贝的内容，<br>&emsp;&emsp;好了，最后我们测试一下看是否配置成功。</p><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><p>成功的话会显示以下的大致内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (192.30.252.128)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>github.com,192.30.252.128<span class="string">' (RSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Hi git-xuhao! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure><p>推送Hexo到github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="其他的配置"><a href="#其他的配置" class="headerlink" title="其他的配置"></a>其他的配置</h2><p>&emsp;&emsp;更加详细的配置请查看 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next使用手册</a></p><p>&emsp;&emsp;使用七牛云图床，参考 使用七牛为Hexo存储图片 和 Hexo七牛同步插件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架，可托管于github pages，可免去维护服务器的麻烦，博主们可更专注于内容的创作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hexo" scheme="http://blog.c-x-l.club/tags/hexo/"/>
    
  </entry>
  
</feed>
